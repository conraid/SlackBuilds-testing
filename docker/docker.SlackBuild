#!/bin/bash
#
# Slackware build script for docker
#

# Copyright 2014-2015 Vincent Batts <vbatts@hashbangbash.com>
# Copyright 2017-2019 Audrius KaÅ¾ukauskas <audrius@neutrino.lt>
# Copyright 2020 Corrado Franco (https://corradofranco.it)
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version, with the following exception:
# the text of the GPL license may be omitted.

# This program is distributed in the hope that it will be useful, but
# without any warranty; without even the implied warranty of
# merchantability or fitness for a particular purpose. Compiling,
# interpreting, executing or merely reading the text of the program
# may result in lapses of consciousness and/or very being, up to and
# including the end of all existence and the Universe as we know it.
# See the GNU General Public License for more details.

# You may have received a copy of the GNU General Public License along
# with this program (most likely, a file named COPYING).  If not, see
# <http://www.gnu.org/licenses/>.
#
# Latest version of this SlackBuild at https://github.com/conraid/SlackBuilds

set -eu

cd $(dirname $0) ; CWD=$(pwd)

PRGNAM=docker-ce
PKGNAM=docker
VERSION=19.03.14
COMMIT=5eb3275d4006e4093807c35b4f7776ecd73b13a7
BUILD=${BUILD:-1}
TAG=${TAG:-cf}
TMP=${TMP:-/tmp/pkg}
PKG=$TMP/package-$PKGNAM
OUTPUT=${OUTPUT:-/tmp}

DOCFILES="*.md"

if [ -z ${ARCH:=""} ]; then
  case "$( uname -m )" in
    i?86) ARCH=i686 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME:-""}" ]; then
  echo "$PKGNAM-$VERSION-$ARCH-$BUILD.txz "
  exit 0
fi

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC -pipe -fomit-frame-pointer"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$VERSION
tar xvf $CWD/$PRGNAM-$VERSION.tar.gz || tar xvf $CWD/$VERSION.tar.gz
cd $PRGNAM-$VERSION

chown -R root:root .
chmod -R u+w,go+r-w,a+X-s .

# Apply patches
if [ -e $CWD/patches ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi

export GOROOT="/usr/lib${LIBDIRSUFFIX}/go"
export PATH="${GOROOT}/bin:${PATH}"

mkdir -p build/src/github.com/docker

( cd build/src/github.com/docker
  ln -s $TMP/$PRGNAM-$VERSION/components/engine docker
  ln -s $TMP/$PRGNAM-$VERSION/components/cli cli
)

# Build daemon.
cd components/engine
  DOCKER_GITCOMMIT=$COMMIT \
  DOCKER_BUILDTAGS="seccomp" \
  VERSION=$(cat ../../VERSION) \
  GOPATH=$TMP/$PRGNAM-$VERSION/build \
  ./hack/make.sh dynbinary

  install -Dm755 $(readlink -f bundles/dynbinary-daemon/dockerd) \
    $PKG/usr/bin/dockerd
cd -

# Build CLI.
cd components/cli
DISABLE_WARN_OUTSIDE_CONTAINER=1 \
make dynbinary \
  GITCOMMIT=$COMMIT \
  VERSION=$(cat ../../VERSION) \
  GOPATH=$TMP/$PRGNAM-$VERSION/build

install -Dm755 build/docker-linux-amd64 $PKG/usr/bin/docker
cd -

# Integrate required components.
ln -s runc $PKG/usr/bin/docker-runc
ln -s containerd $PKG/usr/bin/docker-containerd
ln -s containerd-shim $PKG/usr/bin/docker-containerd-shim
ln -s ctr $PKG/usr/bin/docker-containerd-ctr
ln -s tini-static $PKG/usr/bin/docker-init

# Completion.
cd components/cli/contrib/completion
  install -Dm644 bash/docker $PKG/etc/bash_completion.d/docker
  install -Dm644 zsh/_docker $PKG/usr/share/zsh/site-functions/_docker
cd -

install -Dm644 $CWD/files/docker.default $PKG/etc/default/docker.new
install -Dm644 $CWD/files/docker.logrotate $PKG/etc/logrotate.d/docker.new
install -Dm644 $CWD/files/rc.docker $PKG/etc/rc.d/rc.docker.new

# Install udev rules.
install -Dm644 components/engine/contrib/udev/80-docker.rules \
  $PKG/lib/udev/rules.d/80-docker.rules

# Don't ship .la files:
rm -f $PKG/{,usr/}lib${LIBDIRSUFFIX}/*.la

find $PKG | xargs file | grep -e "executable" -e "shared object" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
find $PKG | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs -r strip -g 2> /dev/null || true

if [ -d $PKG/usr/man ]; then
  find $PKG/usr/man -type f -exec chmod 644 {} \; -exec gzip -9 {} \;
  for i in $( find $PKG/usr/man -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done
fi

mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION
cp -a $DOCFILES $PKG/usr/doc/$PKGNAM-$VERSION || true
cat $CWD/$PKGNAM.SlackBuild > $PKG/usr/doc/$PKGNAM-$VERSION/$PKGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
cat $CWD/doinst.sh > $PKG/install/doinst.sh

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PKGNAM-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-txz}
